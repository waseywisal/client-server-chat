/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chat;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.SwingUtilities;




/**
 *
 * @author KK
 */
public class chat_server extends javax.swing.JFrame {

    static ServerSocket ss;
    static Socket s;
    static DataInputStream dis;
    static DataOutputStream dout;

    /**
     * Creates new form chat_server
     */
    public chat_server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(msg_send))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        // TODO add your handling code here:                                       
     try {
        String msg = msg_text.getText().trim();  // Get the text from the input field
        if (!msg.isEmpty() && dout != null) {
            dout.writeUTF(msg);  // Send the message to the client
            msg_area.append("Server: " + msg + "\n");  // Display the message in the chat area
            msg_text.setText("");  // Clear input field
        }
    } catch (IOException e) {
        msg_area.append("Error sending message.\n");  // Display error in message area
    }
    }//GEN-LAST:event_msg_sendActionPerformed

    /**
     * @param args the command line arguments
     */
private static ExecutorService pool = Executors.newFixedThreadPool(10); // handles multiple clients

static final int PORT = 1201;
static ServerSocket serverSocket;

public static void main(String[] args) {
    // Create the server GUI instance
    chat_server server = new chat_server(); // Create an instance of chat_server to access non-static members
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            server.setVisible(true);  // Start the server GUI
        }
    });

    // Add this line to confirm the server is waiting for connections
    System.out.println("Waiting for client connections...");

    // Start the server and listen for client connections
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                serverSocket = new ServerSocket(PORT);  // Initialize the server socket
                System.out.println("Server started on port " + PORT);
                while (true) {
                    Socket client = serverSocket.accept();  // Accept client connections
                    System.out.println("New client connected: " + client.getInetAddress());
                    pool.execute(new ClientHandler(client, server));  // Pass the server instance to handle client communication
                }
            } catch (IOException e) {
                System.err.println("Server exception: " + e.getMessage());
            } finally {
                try {
                    if (serverSocket != null) serverSocket.close();  // Close the server socket when done
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }).start(); // Start the server thread
}

static class ClientHandler implements Runnable {
    private Socket socket;
    private DataInputStream dis;
    private DataOutputStream dos;
    private chat_server server;  // Reference to the server instance

    public ClientHandler(Socket socket, chat_server server) {
        this.socket = socket;
        this.server = server;  // Store the server instance
        try {
            dis = new DataInputStream(socket.getInputStream());
            dos = new DataOutputStream(socket.getOutputStream());
        } catch (IOException e) {
            System.err.println("Error setting up streams: " + e.getMessage());
        }
    }

    @Override
    public void run() {
        String msg = "";
        try {
         while (!msg.equals("exit")) {
    msg = dis.readUTF();  // Read message from client
    System.out.println("Client says: " + msg);

    final String capturedMsg = msg;  // Make a final copy for inner class use

    SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            server.msg_area.append("Client: " + capturedMsg + "\n");  // Use the final copy
        }
    });

    dos.writeUTF("Echo: " + msg);
}
        } catch (IOException e) {
            if (e instanceof java.net.SocketException) {
                System.err.println("Client disconnected: " + e.getMessage());
            } else {
                System.err.println("Error receiving message from client: " + e.getMessage());
            }
        } finally {
            try {
                dis.close();
                dos.close();
                socket.close();  // Close client socket after communication
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("Client disconnected.");
        }
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    // End of variables declaration//GEN-END:variables
}